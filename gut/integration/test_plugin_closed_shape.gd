extends "res://addons/gut/test.gd"

var FUNC = load("res://addons/rmsmartshape/plugin-functionality.gd")

signal yield_complete(number)


var yields_complete = 0
func yield_complete():
	yields_complete += 1
	gut.p("Yields Complete %s" % yields_complete)
	emit_signal("yield_complete", yields_complete)


func after_each():
	gut.p("Teardown", 2)
	yields_complete = 0


func test_delete_point_async():
	var shapes = []
	var shape_count = 10
	for _i in range(0, shape_count, 1):
		var shape = SS2D_Shape_Closed.new()
		add_child_autofree(shape)
		shapes.push_back(shape)

	var coroutines = []
	for i in range(0, shape_count, 1):
		coroutines.push_back(delete_closed_test(shapes[i], i))
	for c in coroutines:
		c.connect("completed", self, "yield_complete")
	for i in range(0, shape_count, 1):
		yield(self, "yield_complete")

	assert_eq(yields_complete, shape_count)

func undo_update_method():
	pass

func delete_closed_test(shape: SS2D_Shape_Closed, i: int = 0):
	var undo = UndoRedo.new()
	var points = get_clockwise_points()
	var keys = []
	for i in range(0, points.size(), 1):
		var p = points[i]
		keys.push_back(shape.add_point(p))

	# Breif yield for no particular reason
	for _i in range(0, (randi() % 4) + 1, 1):
		yield(get_tree(), "physics_frame")

	# Extra autogenerated point
	assert_eq(shape.get_point_count(), points.size() + 1, "%s: Autogen point" % i)

	# Deleted initial point and, by way of constraints, the autogenerated point
	# minus 2
	FUNC.action_delete_point(self, "undo_update_method", undo, shape, keys[0])
	# New point should be added to close the shape
	# plus 1
	assert_eq(shape.get_point_count(), points.size(), "%s: New Autogen point" % i)

	# Breif yield for no particular reason
	for _i in range(0, (randi() % 4) + 1, 1):
		yield(get_tree(), "physics_frame")

	# Delete point with no constraints
	# minus 1
	FUNC.action_delete_point(self, "undo_update_method", undo, shape, keys[3])
	assert_eq(shape.get_point_count(), points.size() - 1, "%s: Delete Point" % i)

	undo.undo()
	# Plus 1
	assert_eq(shape.get_point_count(), points.size(), "%s: Undo Delete" % i)

	# Breif yield for no particular reason
	for _i in range(0, (randi() % 4) + 1, 1):
		yield(get_tree(), "physics_frame")

	undo.undo()
	# Plus 1
	assert_eq(shape.get_point_count(), points.size() + 1, "%s: Undo Delete" % i)


func get_clockwise_points() -> Array:
	return [
		Vector2(0, 0),
		Vector2(50, -50),
		Vector2(100, 0),
		Vector2(100, 100),
		Vector2(0, 100),
		Vector2(-25, 125),
		Vector2(-50, 150),
		Vector2(-100, 100)
	]
